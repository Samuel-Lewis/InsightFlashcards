{"version":3,"sources":["serviceWorker.ts","Deck.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Deck","props","toggleSelection","setState","selected","onChange","title","loading","loadDeck","fetch","this","r","text","d","split","map","line","trim","filter","phrase","length","wordCount","body","animation","role","className","Title","style","textTransform","Subtitle","key","width","height","bg","undefined","onClick","Body","React","Component","dataFiles","App","deckChanged","deckName","newState","selectedDecks","add","delete","start","decks","sort","file","Set","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d43d617c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Card from 'react-bootstrap/Card';\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\ntype DeckProps = {\n  title: string;\n  onChange?: (deckName: string, newState: boolean) => void;\n};\n\ntype DeckState = {\n  loading: boolean;\n  selected: boolean;\n  wordCount?: number;\n};\n\nexport class Deck extends React.Component<DeckProps, DeckState> {\n  constructor(props: DeckProps) {\n    super(props);\n    this.state = {\n      loading: true,\n      selected: false\n    };\n\n    this.loadDeck();\n  }\n\n  loadDeck(): void {\n    fetch(`./data/${this.props.title}.csv`)\n      .then(r => r.text())\n      .then(d => d.split('\\n').map(line => line.trim().split(';')))\n      .then(d => d.filter(phrase => phrase.length === 2))\n      .then(d =>\n        this.setState({\n          loading: false,\n          wordCount: d.length\n        })\n      );\n  }\n\n  toggleSelection = (): void => {\n    this.setState({ selected: !this.state.selected });\n    if (this.props.onChange) {\n      this.props.onChange(this.props.title, !this.state.selected);\n    }\n  };\n\n  render(): JSX.Element {\n    const { title } = this.props;\n    const { loading, wordCount, selected } = this.state;\n\n    let body;\n    if (loading || !wordCount) {\n      body = (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      );\n    } else {\n      body = (\n        <>\n          <Card.Title>\n            <h5 style={{ textTransform: 'capitalize' }}>{title}</h5>\n          </Card.Title>\n          <Card.Subtitle className=\"mb-2\">\n            {wordCount} card{wordCount > 1 ? 's' : ''}\n          </Card.Subtitle>\n        </>\n      );\n    }\n\n    return (\n      <Card\n        key={title}\n        style={{ width: '10rem', height: '8rem' }}\n        className=\"text-center\"\n        bg={selected ? 'primary' : undefined}\n        text={selected ? 'white' : undefined}\n        onClick={this.toggleSelection}\n      >\n        <Card.Body>{body}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport { Deck } from './Deck';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\n\ntype AppProps = {};\ntype AppState = {\n  decks: any[]; // FIXME: Type for Deck[]\n  selectedDecks: Set<string>;\n};\n\nconst dataFiles = ['animals', 'clothes', 'food'];\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    const decks = dataFiles\n      .sort()\n      .map(file => (\n        <Deck key={file} title={file} onChange={this.deckChanged} />\n      ));\n\n    this.state = {\n      decks,\n      selectedDecks: new Set()\n    };\n  }\n\n  deckChanged = (deckName: string, newState: boolean): void => {\n    const { selectedDecks } = this.state;\n    if (newState) {\n      selectedDecks.add(deckName);\n    } else {\n      selectedDecks.delete(deckName);\n    }\n\n    this.setState({ selectedDecks });\n  };\n\n  start = (): void => {\n    console.log(this.state.selectedDecks);\n  };\n\n  render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>Insight</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <CardDeck>{this.state.decks}</CardDeck>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button onClick={this.start}>Lets go</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}