{"version":3,"sources":["serviceWorker.ts","Deck.tsx","Viewer.tsx","DeckList.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","loadDeck","deckName","fetch","r","text","d","split","map","line","trim","filter","phrase","length","Deck","props","toggleSelection","setState","selected","onChange","title","loading","this","wordCount","body","animation","role","className","Title","style","textTransform","Subtitle","key","width","height","bg","undefined","onClick","Body","React","Component","Viewer","params","qs","parse","search","arrayFormat","deckNames","decks","redirect","words","loads","Promise","all","data","JSON","stringify","to","dataFiles","DeckList","deckChanged","newState","selectedDecks","add","delete","sort","file","Set","Array","from","join","App","basename","process","exact","path","render","ReactDOM","document","getElementById","URL","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.648e5903.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Card from 'react-bootstrap/Card';\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\ntype DeckProps = {\n  title: string;\n  onChange?: (deckName: string, newState: boolean) => void;\n};\n\ntype DeckState = {\n  loading: boolean;\n  selected: boolean;\n  wordCount?: number;\n};\n\nexport const loadDeck = (deckName: string): Promise<string[][]> =>\n  fetch(`./data/${deckName}.csv`)\n    .then(r => r.text())\n    .then(d => d.split('\\n').map(line => line.trim().split(';')))\n    .then(d => d.filter(phrase => phrase.length === 2));\n\nexport class Deck extends React.Component<DeckProps, DeckState> {\n  constructor(props: DeckProps) {\n    super(props);\n    this.state = {\n      loading: true,\n      selected: false\n    };\n  }\n\n  componentDidMount(): void {\n    loadDeck(this.props.title).then(d =>\n      this.setState({\n        loading: false,\n        wordCount: d.length\n      })\n    );\n  }\n\n  toggleSelection = (): void => {\n    this.setState({ selected: !this.state.selected });\n    if (this.props.onChange) {\n      this.props.onChange(this.props.title, !this.state.selected);\n    }\n  };\n\n  render(): JSX.Element {\n    const { title } = this.props;\n    const { loading, wordCount, selected } = this.state;\n\n    let body;\n    if (loading || !wordCount) {\n      body = (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      );\n    } else {\n      body = (\n        <>\n          <Card.Title>\n            <h5 style={{ textTransform: 'capitalize' }}>{title}</h5>\n          </Card.Title>\n          <Card.Subtitle className=\"mb-2\">\n            {wordCount} card{wordCount > 1 ? 's' : ''}\n          </Card.Subtitle>\n        </>\n      );\n    }\n\n    return (\n      <Card\n        key={title}\n        style={{ width: '10rem', height: '8rem' }}\n        className=\"text-center\"\n        bg={selected ? 'primary' : undefined}\n        text={selected ? 'white' : undefined}\n        onClick={this.toggleSelection}\n      >\n        <Card.Body>{body}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Redirect, RouteComponentProps } from 'react-router';\n\nimport Col from 'react-bootstrap/Col';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport { loadDeck } from './Deck';\nimport qs from 'query-string';\n\nexport type ViewerProps = RouteComponentProps;\ntype ViewerState = {\n  deckNames: string[];\n  redirect: boolean;\n  words: string;\n};\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  constructor(props: ViewerProps) {\n    super(props);\n    const params = qs.parse(this.props.location.search, {\n      arrayFormat: 'comma'\n    });\n    const deckNames = params.decks || params.d || [];\n\n    this.state = {\n      deckNames: typeof deckNames === 'string' ? [deckNames] : deckNames,\n      redirect: false,\n      words: ''\n    };\n  }\n\n  componentDidMount(): void {\n    const { deckNames } = this.state;\n    if (deckNames.length === 0) {\n      this.setState({ redirect: true });\n      return;\n    }\n\n    const loads = deckNames.map(loadDeck);\n    Promise.all(loads).then(data =>\n      this.setState({ words: JSON.stringify(data) })\n    );\n  }\n\n  render(): JSX.Element {\n    if (this.state.redirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <Row>\n        <Col>\n          <h1>Woot</h1>\n          {this.state.words}\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Viewer;\n","import Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Col from 'react-bootstrap/Col';\nimport { Deck } from './Deck';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\n\ntype DeckListProps = {};\ntype DeckListState = {\n  decks: any[]; // FIXME: Type for Deck[]\n  selectedDecks: Set<string>;\n};\n\nconst dataFiles = ['animals', 'clothes', 'food'];\n\nclass DeckList extends React.Component<DeckListProps, DeckListState> {\n  constructor(props: DeckListProps) {\n    super(props);\n    const decks = dataFiles\n      .sort()\n      .map(file => (\n        <Deck key={file} title={file} onChange={this.deckChanged} />\n      ));\n\n    this.state = {\n      decks,\n      selectedDecks: new Set()\n    };\n  }\n\n  deckChanged = (deckName: string, newState: boolean): void => {\n    const { selectedDecks } = this.state;\n    if (newState) {\n      selectedDecks.add(deckName);\n    } else {\n      selectedDecks.delete(deckName);\n    }\n\n    this.setState({ selectedDecks });\n  };\n\n  render(): JSX.Element {\n    return (\n      <>\n        <Row>\n          <Col>\n            <h1>Insight</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <CardDeck>{this.state.decks}</CardDeck>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <LinkContainer\n              to={\n                '/view?decks=' + Array.from(this.state.selectedDecks).join(',')\n              }\n            >\n              <Button>Start!</Button>\n            </LinkContainer>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default DeckList;\n","import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport Viewer, { ViewerProps } from './Viewer';\n\nimport Container from 'react-bootstrap/Container';\nimport DeckList from './DeckList';\nimport React from 'react';\n\nclass App extends React.Component {\n  render(): JSX.Element {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Container>\n          <Switch>\n            <Route\n              exact\n              path=\"/view\"\n              render={(props: ViewerProps): JSX.Element => (\n                <Viewer {...props} />\n              )}\n            ></Route>\n            <Route exact path=\"/\">\n              <DeckList />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}