{"version":3,"sources":["serviceWorker.ts","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","dataFiles","App","props","cardify","listName","wordCount","newCard","key","style","width","Body","Title","Subtitle","setState","cards","map","fetch","r","text","d","split","line","trim","filter","phrase","length","className","this","React","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kJAYA,IAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,sIC5F3DC,EAAY,CAAC,UAAW,UAAW,QAiD1BC,E,YA9Cb,WAAYC,GAAkB,IAAD,8BAC3B,4CAAMA,KAcRC,QAAU,SAACC,EAAkBC,GAC3B,IAAMC,EACJ,kBAAC,IAAD,CAAMC,IAAKH,EAAUI,MAAO,CAAEC,MAAO,UACnC,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAKC,MAAN,KACE,4BAAKP,IAEP,kBAAC,IAAKQ,SAAN,KACGP,EADH,UACqBA,EAAY,EAAI,IAAM,MAKjD,EAAKQ,SAAS,CAAEC,MAAM,GAAD,mBAAM,EAAKtB,MAAMsB,OAAjB,CAAwBR,OA1B7C,EAAKd,MAAQ,CACXsB,MAAO,IAGTd,EAAUe,KAAI,SAACX,GAAD,OACZY,MAAM,UAAD,OAAWZ,EAAX,SACFlB,MAAK,SAAA+B,GAAC,OAAIA,EAAEC,UACZhC,MAAK,SAAAiC,GAAC,OAAIA,EAAEC,MAAM,MAAML,KAAI,SAAAM,GAAI,OAAIA,EAAKC,OAAOF,MAAM,WACtDlC,MAAK,SAAAiC,GAAC,OAAIA,EAAEI,QAAO,SAAAC,GAAM,OAAsB,IAAlBA,EAAOC,aACpCvC,MAAK,SAAAiC,GAAC,OAAI,EAAKhB,QAAQC,EAAUe,EAAEM,cAXb,E,sEAgC3B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,UAAU,UACb,wCAEF,kBAAC,IAAD,CAAKA,UAAU,UAAUC,KAAKnC,MAAMsB,OACpC,kBAAC,IAAD,CAAKY,UAAU,UACb,kBAAC,IAAD,sB,GAxCQE,IAAMC,W,eCRxBC,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFqB1C,SAAkBnD,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAImD,IACnBC,sBACD3D,OAAOC,SAAS2D,MAEJC,SAAW7D,OAAOC,SAAS4D,OAIvC,OAGF7D,OAAO8D,iBAAiB,QAAQ,WAC9B,IAAMzD,EAAK,UAAMsD,sBAAN,sBAEP7D,IAgEV,SAAiCO,EAAeC,GAE9CkC,MAAMnC,GACHK,MAAK,SAAAqD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7D,UAAUC,cAAc6D,MAAM3D,MAAK,SAAAC,GACjCA,EAAa2D,aAAa5D,MAAK,WAC7BV,OAAOC,SAASsE,eAKpBnE,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAqD,CAAwBnE,EAAOC,GAI/BC,UAAUC,cAAc6D,MAAM3D,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OEnD/BE,K","file":"static/js/main.1bc85aa3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\n\ntype CardType = JSX.Element;\ntype AppProps = {};\ntype AppState = {\n  cards: CardType[];\n};\n\nconst dataFiles = ['animals', 'clothes', 'food'];\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      cards: []\n    };\n\n    dataFiles.map((listName: string) =>\n      fetch(`./data/${listName}.csv`)\n        .then(r => r.text())\n        .then(d => d.split('\\n').map(line => line.trim().split(';')))\n        .then(d => d.filter(phrase => phrase.length === 2))\n        .then(d => this.cardify(listName, d.length))\n    );\n  }\n\n  cardify = (listName: string, wordCount: number): void => {\n    const newCard = (\n      <Card key={listName} style={{ width: '18rem' }}>\n        <Card.Body>\n          <Card.Title>\n            <h5>{listName}</h5>\n          </Card.Title>\n          <Card.Subtitle>\n            {wordCount} phrase{wordCount > 1 ? 's' : ''}\n          </Card.Subtitle>\n        </Card.Body>\n      </Card>\n    );\n    this.setState({ cards: [...this.state.cards, newCard] });\n  };\n\n  render(): JSX.Element {\n    return (\n      <Container>\n        <Row className=\"col-xl\">\n          <h1>Insight</h1>\n        </Row>\n        <Row className=\"col-xl\">{this.state.cards}</Row>\n        <Row className=\"col-xl\">\n          <Button>Lets go</Button>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}