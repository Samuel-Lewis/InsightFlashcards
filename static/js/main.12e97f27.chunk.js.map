{"version":3,"sources":["serviceWorker.ts","FlippableCard.tsx","Deck.tsx","Viewer.tsx","DeckList.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","FlippableCard","props","flip","setState","flipped","sides","this","length","style","backgroundColor","color","height","onClick","className","React","Component","loadDeck","deckName","fetch","r","text","d","split","map","line","trim","filter","phrase","Deck","toggleSelection","selected","onChange","title","loading","wordCount","body","animation","role","Title","textTransform","Subtitle","key","width","bg","undefined","Body","Viewer","params","qs","parse","search","arrayFormat","deckNames","decks","redirect","words","loads","Promise","all","data","shuffle","flat","slice","to","spinner","slide","interval","word","Item","fluid","padding","margin","overflow","dataFiles","DeckList","deckChanged","newState","selectedDecks","add","delete","sort","file","Set","Array","from","join","NotFound","App","exact","path","render","component","ReactDOM","basename","process","document","getElementById","URL","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kJAYA,IAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,uHCtDlDC,E,YAjCb,WAAYC,GAA4B,IAAD,8BACrC,4CAAMA,KAMRC,KAAO,WACL,EAAKC,SAAS,CAAEC,SAAU,EAAKZ,MAAMY,WANrC,EAAKZ,MAAQ,CACXY,SAAS,GAH0B,E,sEAWhB,IACbC,EAAUC,KAAKL,MAAfI,MACR,OAAqB,IAAjBA,EAAME,OACD,8CAAUF,GAIjB,yBACEG,MAAO,CACLC,gBAAiBH,KAAKd,MAAMY,QAnChB,UACA,UAmCZM,MAAO,QACPC,OAAQ,SAEVC,QAASN,KAAKJ,KACdW,UAAU,oDAEV,4BAAKP,KAAKd,MAAMY,QAAUC,EAAM,GAAKA,EAAM,S,GA/BvBS,IAAMC,W,mDCErBC,EAAW,SAACC,GAAD,OACtBC,MAAM,UAAD,OAAWD,EAAX,SACF/B,MAAK,SAAAiC,GAAC,OAAIA,EAAEC,UACZlC,MAAK,SAAAmC,GAAC,OAAIA,EAAEC,MAAM,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAAOH,MAAM,WACtDpC,MAAK,SAAAmC,GAAC,OAAIA,EAAEK,QAAO,SAAAC,GAAM,OAAsB,IAAlBA,EAAOpB,cAE5BqB,EAAb,YACE,WAAY3B,GAAmB,IAAD,8BAC5B,4CAAMA,KAgBR4B,gBAAkB,WAChB,EAAK1B,SAAS,CAAE2B,UAAW,EAAKtC,MAAMsC,WAClC,EAAK7B,MAAM8B,UACb,EAAK9B,MAAM8B,SAAS,EAAK9B,MAAM+B,OAAQ,EAAKxC,MAAMsC,WAlBpD,EAAKtC,MAAQ,CACXyC,SAAS,EACTH,UAAU,GAJgB,EADhC,iFAS6B,IAAD,OACxBd,EAASV,KAAKL,MAAM+B,OAAO9C,MAAK,SAAAmC,GAAC,OAC/B,EAAKlB,SAAS,CACZ8B,SAAS,EACTC,UAAWb,EAAEd,cAbrB,+BAyByB,IAIjB4B,EAHIH,EAAU1B,KAAKL,MAAf+B,MADY,EAEqB1B,KAAKd,MAAtCyC,EAFY,EAEZA,QAASC,EAFG,EAEHA,UAAWJ,EAFR,EAEQA,SAsB5B,OAlBEK,EADEF,IAAYC,EAEZ,kBAAC,IAAD,CAASE,UAAU,SAASC,KAAK,UAC/B,0BAAMxB,UAAU,WAAhB,eAKF,oCACE,kBAAC,IAAKyB,MAAN,KACE,wBAAI9B,MAAO,CAAE+B,cAAe,eAAiBP,IAE/C,kBAAC,IAAKQ,SAAN,CAAe3B,UAAU,QACtBqB,EADH,QACmBA,EAAY,EAAI,IAAM,KAO7C,kBAAC,IAAD,CACEO,IAAKT,EACLxB,MAAO,CAAEkC,MAAO,QAAS/B,OAAQ,QACjCE,UAAU,cACV8B,GAAIb,EAAW,eAAYc,EAC3BxB,KAAMU,EAAW,aAAUc,EAC3BhC,QAASN,KAAKuB,iBAEd,kBAAC,IAAKgB,KAAN,KAAYV,QA1DpB,GAA0BrB,IAAMC,W,kCC0EjB+B,E,YAzEb,WAAY7C,GAAqB,IAAD,sBAC9B,4CAAMA,IACN,IAAM8C,EAASC,IAAGC,MAAM,EAAKhD,MAAMxB,SAASyE,OAAQ,CAClDC,YAAa,UAETC,EAAYL,EAAOM,OAASN,EAAO1B,GAAK,GALhB,OAO9B,EAAK7B,MAAQ,CACX4D,UAAgC,kBAAdA,EAAyB,CAACA,GAAaA,EACzDE,UAAU,EACVC,MAAO,GACPtB,SAAS,GAXmB,E,iFAeL,IAAD,OAChBmB,EAAc9C,KAAKd,MAAnB4D,UACR,GAAyB,IAArBA,EAAU7C,OAAd,CAKA,IAAMiD,EAAQJ,EAAU7B,IAAIP,GAC5ByC,QAAQC,IAAIF,GACTtE,MAAK,SAAAyE,GAAI,OAAIC,IAAQD,EAAKE,QAAQC,MAAM,EAAG,OAC3C5E,MAAK,SAAAyE,GAAI,OACR,EAAKxD,SAAS,CACZoD,MAAOI,EACP1B,SAAS,YAVb3B,KAAKH,SAAS,CAAEmD,UAAU,M,+BAgB5B,GAAIhD,KAAKd,MAAM8D,SACb,OAAO,kBAAC,IAAD,CAAUS,GAAG,MAGtB,IAMI5B,EANE6B,EACJ,kBAAC,IAAD,CAAS5B,UAAU,SAASC,KAAK,UAC/B,0BAAMxB,UAAU,WAAhB,eAoBJ,OAdIP,KAAKd,MAAMyC,UACbE,EAAO6B,GAGT7B,EACE,kBAAC,IAAD,CAAU8B,OAAO,EAAOC,SAAU,GAC/B5D,KAAKd,MAAM+D,MAAMhC,KAAI,SAAA4C,GAAI,OACxB,kBAAC,IAASC,KAAV,CAAe3B,IAAG,UAAK0B,EAAK,GAAV,YAAgBA,EAAK,KACrC,kBAAC,EAAD,CAAe9D,MAAO8D,SAO5B,kBAAC,IAAD,CACEE,OAAO,EACP7D,MAAO,CAAE8D,QAAS,EAAGC,OAAQ,EAAGC,SAAU,WAE1C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK3D,UAAU,eAAesB,S,GAnEnBrB,IAAMC,W,0CCNrB0D,EAAY,CAAC,UAAW,SAAU,OAAQ,gBAAiB,WAyDlDC,E,YAtDb,WAAYzE,GAAuB,IAAD,uBAChC,4CAAMA,KAaR0E,YAAc,SAAC1D,EAAkB2D,GAA6B,IACpDC,EAAkB,EAAKrF,MAAvBqF,cACJD,EACFC,EAAcC,IAAI7D,GAElB4D,EAAcE,OAAO9D,GAGvB,EAAKd,SAAS,CAAE0E,mBApBhB,IAAMxB,EAAQoB,EACXO,OACAzD,KAAI,SAAA0D,GAAI,OACP,kBAAC,EAAD,CAAMxC,IAAKwC,EAAMjD,MAAOiD,EAAMlD,SAAU,EAAK4C,iBALjB,OAQhC,EAAKnF,MAAQ,CACX6D,QACAwB,cAAe,IAAIK,KAVW,E,sEA0BhC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,yCAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAc5E,KAAKd,MAAM6D,SAG7B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,gBAAD,CACEU,GACE,eAAiBoB,MAAMC,KAAK9E,KAAKd,MAAMqF,eAAeQ,KAAK,MAG7D,kBAAC,IAAD,uB,GA9CSvE,IAAMC,WCXvBuE,EAAW,WACf,OAAO,kBAAC,IAAD,CAAUvB,GAAG,OAuBPwB,E,iLAlBX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,QACLC,OAAQ,SAACzF,GAAD,OAAqC,kBAAC,EAAWA,MAE3D,kBAAC,IAAD,CAAOuF,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOE,UAAWL,U,GAbVxE,IAAMC,W,yBCHxB6E,IAASF,OACP,kBAAC,gBAAD,CAAQG,SAAUC,sBAChB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNgBnB,SAAkBlH,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkH,IACnBH,qBACDtH,OAAOC,SAASyH,MAEJC,SAAW3H,OAAOC,SAAS0H,OAIvC,OAGF3H,OAAO4H,iBAAiB,QAAQ,WAC9B,IAAMvH,EAAK,UAAMiH,qBAAN,sBAEPxH,IAgEV,SAAiCO,EAAeC,GAE9CoC,MAAMrC,GACHK,MAAK,SAAAmH,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3H,UAAUC,cAAc2H,MAAMzH,MAAK,SAAAC,GACjCA,EAAayH,aAAa1H,MAAK,WAC7BV,OAAOC,SAASoI,eAKpBjI,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAmH,CAAwBjI,EAAOC,GAI/BC,UAAUC,cAAc2H,MAAMzH,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OM7C/BE,K","file":"static/js/main.12e97f27.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst COLOUR_SIDE_A = '#1C2331';\nconst COLOUR_SIDE_B = '#3F729B';\n\nexport type FlippableCardProps = {\n  sides: string[];\n};\n\ntype FlippableCardState = {\n  flipped: boolean;\n};\n\nclass FlippableCard extends React.Component<\n  FlippableCardProps,\n  FlippableCardState\n> {\n  constructor(props: FlippableCardProps) {\n    super(props);\n    this.state = {\n      flipped: false\n    };\n  }\n\n  flip = (): void => {\n    this.setState({ flipped: !this.state.flipped });\n  };\n\n  render(): JSX.Element {\n    const { sides } = this.props;\n    if (sides.length !== 2) {\n      return <>ERROR: {sides}</>;\n    }\n\n    return (\n      <div\n        style={{\n          backgroundColor: this.state.flipped ? COLOUR_SIDE_A : COLOUR_SIDE_B,\n          color: 'white',\n          height: '100vh'\n        }}\n        onClick={this.flip}\n        className=\"d-flex align-items-center justify-content-center\"\n      >\n        <h1>{this.state.flipped ? sides[0] : sides[1]}</h1>\n      </div>\n    );\n  }\n}\n\nexport default FlippableCard;\n","import Card from 'react-bootstrap/Card';\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\ntype DeckProps = {\n  title: string;\n  onChange?: (deckName: string, newState: boolean) => void;\n};\n\ntype DeckState = {\n  loading: boolean;\n  selected: boolean;\n  wordCount?: number;\n};\n\nexport const loadDeck = (deckName: string): Promise<string[][]> =>\n  fetch(`./data/${deckName}.csv`)\n    .then(r => r.text())\n    .then(d => d.split('\\n').map(line => line.trim().split(';')))\n    .then(d => d.filter(phrase => phrase.length === 2));\n\nexport class Deck extends React.Component<DeckProps, DeckState> {\n  constructor(props: DeckProps) {\n    super(props);\n    this.state = {\n      loading: true,\n      selected: false\n    };\n  }\n\n  componentDidMount(): void {\n    loadDeck(this.props.title).then(d =>\n      this.setState({\n        loading: false,\n        wordCount: d.length\n      })\n    );\n  }\n\n  toggleSelection = (): void => {\n    this.setState({ selected: !this.state.selected });\n    if (this.props.onChange) {\n      this.props.onChange(this.props.title, !this.state.selected);\n    }\n  };\n\n  render(): JSX.Element {\n    const { title } = this.props;\n    const { loading, wordCount, selected } = this.state;\n\n    let body;\n    if (loading || !wordCount) {\n      body = (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      );\n    } else {\n      body = (\n        <>\n          <Card.Title>\n            <h5 style={{ textTransform: 'capitalize' }}>{title}</h5>\n          </Card.Title>\n          <Card.Subtitle className=\"mb-2\">\n            {wordCount} card{wordCount > 1 ? 's' : ''}\n          </Card.Subtitle>\n        </>\n      );\n    }\n\n    return (\n      <Card\n        key={title}\n        style={{ width: '10rem', height: '8rem' }}\n        className=\"text-center\"\n        bg={selected ? 'primary' : undefined}\n        text={selected ? 'white' : undefined}\n        onClick={this.toggleSelection}\n      >\n        <Card.Body>{body}</Card.Body>\n      </Card>\n    );\n  }\n}\n","import { Redirect, RouteComponentProps } from 'react-router';\n\nimport Carousel from 'react-bootstrap/Carousel';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport FlippableCard from './FlippableCard';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { loadDeck } from './Deck';\nimport qs from 'query-string';\nimport shuffle from 'shuffle-array';\n\nexport type ViewerProps = RouteComponentProps;\ntype ViewerState = {\n  deckNames: string[];\n  redirect: boolean;\n  words: string[][];\n  loading: boolean;\n};\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  constructor(props: ViewerProps) {\n    super(props);\n    const params = qs.parse(this.props.location.search, {\n      arrayFormat: 'comma'\n    });\n    const deckNames = params.decks || params.d || [];\n\n    this.state = {\n      deckNames: typeof deckNames === 'string' ? [deckNames] : deckNames,\n      redirect: false,\n      words: [],\n      loading: true\n    };\n  }\n\n  componentDidMount(): void {\n    const { deckNames } = this.state;\n    if (deckNames.length === 0) {\n      this.setState({ redirect: true });\n      return;\n    }\n\n    const loads = deckNames.map(loadDeck);\n    Promise.all(loads)\n      .then(data => shuffle(data.flat()).slice(0, 20))\n      .then(data =>\n        this.setState({\n          words: data,\n          loading: false\n        })\n      );\n  }\n\n  render(): JSX.Element {\n    if (this.state.redirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const spinner = (\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n\n    let body;\n\n    if (this.state.loading) {\n      body = spinner;\n    }\n\n    body = (\n      <Carousel slide={false} interval={0}>\n        {this.state.words.map(word => (\n          <Carousel.Item key={`${word[0]}-${word[1]}`}>\n            <FlippableCard sides={word} />\n          </Carousel.Item>\n        ))}\n      </Carousel>\n    );\n\n    return (\n      <Container\n        fluid={true}\n        style={{ padding: 0, margin: 0, overflow: 'hidden' }}\n      >\n        <Row>\n          <Col className=\"text-center\">{body}</Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Viewer;\n","import Button from 'react-bootstrap/Button';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport { Deck } from './Deck';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport React from 'react';\nimport Row from 'react-bootstrap/Row';\n\ntype DeckListProps = {};\ntype DeckListState = {\n  decks: any[]; // FIXME: Type for Deck[]\n  selectedDecks: Set<string>;\n};\n\nconst dataFiles = ['animals', 'basics', 'food', 'phrases-vocab', 'phrases'];\n\nclass DeckList extends React.Component<DeckListProps, DeckListState> {\n  constructor(props: DeckListProps) {\n    super(props);\n    const decks = dataFiles\n      .sort()\n      .map(file => (\n        <Deck key={file} title={file} onChange={this.deckChanged} />\n      ));\n\n    this.state = {\n      decks,\n      selectedDecks: new Set()\n    };\n  }\n\n  deckChanged = (deckName: string, newState: boolean): void => {\n    const { selectedDecks } = this.state;\n    if (newState) {\n      selectedDecks.add(deckName);\n    } else {\n      selectedDecks.delete(deckName);\n    }\n\n    this.setState({ selectedDecks });\n  };\n\n  render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>Insight</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <CardColumns>{this.state.decks}</CardColumns>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <LinkContainer\n              to={\n                '/view?decks=' + Array.from(this.state.selectedDecks).join(',')\n              }\n            >\n              <Button>Start!</Button>\n            </LinkContainer>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default DeckList;\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport Viewer, { ViewerProps } from './Viewer';\n\nimport DeckList from './DeckList';\nimport React from 'react';\n\nconst NotFound = (): JSX.Element => {\n  return <Redirect to=\"/\" />;\n};\n\nclass App extends React.Component {\n  render(): JSX.Element {\n    return (\n      <div>\n        <Switch>\n          <Route\n            exact\n            path=\"/view\"\n            render={(props: ViewerProps): JSX.Element => <Viewer {...props} />}\n          ></Route>\n          <Route exact path=\"/\">\n            <DeckList />\n          </Route>\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}